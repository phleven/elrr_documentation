elrr (Enterprise Learner Record Repository) setup


Use Java 17
Install Dependencies
Clone Remote Git Repository
Create a new Eclipse Workspace
Import Project Into Eclipse
Create Docker Containers (Docker compose)
Create Kafka Dead Letter Queue
Create and populate PostgreSQL staging schema
Run elrrexternalservices
Application UI
Run elrrexternalservices
Run elrrdatasynch
Run elrraggregation
Run Postman to populate lrs-db
Remove Application from Docker
View runnung Docker containers
View Kafka topics
View Kafka topic messages
KafkaMagic



Use Java 17:
   c. java -version
   d. echo $JAVA_HOME



Install Dependencies:
1. Install git
     1. cd "C:\Users\Phil Leven\git\elrrserviceentities"
      2. git config --global user.email "phleven@deloitte.com"
      3. git config --global user.name "Leven"
      
2. Install Maven

3. Install Docker Desktop
   a. Open terminal
      1. wsl --install
         a. New UNIX username = phleven
         b. New password = Cynthia1#
         
4. Docker Compose
   a. Open terminal
      1. cd C:\Information\Applications\elrr\
      2. docker compose up -d
   


Create a new Eclipse Workspace:
1. Open Eclipse
   a. Set Java version in Eclipse
      1. Eclipse --> Window --> Preferences --> Java --> Installed JREs
         a. Check jdk17
         b. Right click on ellraggrigator --> Properties --> Project Facets
            1. Java = 17 --> Apply and Close
   b. Show all files
       1. Package Explorer --> 3 dots --> Filters --> un-check .* resources
   c. Add Lombok Plugin to Eclipse:
      1. Eclipse --> Help --> Install New Software --> Add
         a. Name = Lombok
         b. Location = https://projectlombok.org/p2


Import Project into Eclipse
elrrserviceentities
-------------------
      1. Eclipse --> File --> Import --> Git --> Projects from Git --> Clone URI
         a. URI = https://github.com/US-ELRR/elrrserviceentities.git
         b. User = phleven
         c. Password = phil55.cindy61
         d. Select all branches
         e. Local Destination = C:\Users\Phil Leven\git\elrrserviceentities
        
      2. Eclipse --> Show View --> Git Repositories --> Right click on elrrserviceentities [dev-update-branch] C:\Users\Phil Leven\git\elrrserviceentities\.git 
	--> Working Tree - C:\Users\Phil Leven\git\elrrserviceentities\.git --> Import Projects 
         a. Import source = C:\Users\Phil Leven\git\elrrserviceentities
         b. Check all folders
         
      3. Open terminal
         a. cd cd C:\Users\Phil Leven\git\elrrserviceentities
         b. mvn install
         
         
java-xapi-tools
---------------
      1. Eclipse --> File --> Import --> Git --> Projects from Git --> Clone URI
         a. URI = https://github.com/yetanalytics/java-xapi-tools.git
         b. User = phleven
         c. Password = phil55.cindy61
         d. Select all branches
         e. Local Destination = C:\Users\Phil Leven\git\java-xapi-tools
        
      2. Eclipse --> Show View --> Git Repositories --> Right click on java-xapi-tools [initial-client] C:\Users\Phil Leven\git\java-xapi-tools\.git 
	--> Working Tree - C:\Users\Phil Leven\git\java-xapi-tools\.git --> Import Projects 
         a. Import source = C:\Users\Phil Leven\git\java-xapi-tools
         b. Check all folders
         
      3. Open terminal
         a. cd cd C:\Users\Phil Leven\git\java-xapi-tools
         b. mvn install  
    
    
elrraggregator
--------------
      1. File --> Import --> Git --> Projects from Git --> Clone URI
         a. URI = https://github.com/US-ELRR/elrraggregator.git
         b. User = phleven
         c. Password = phil55.cindy61
         d. Select all branches
         e. Local Destination = C:\Users\Phil Leven\git\elrraggregator
        
      2. Eclipse --> Show View --> Git Repositories --> Right click on ellaggrigator [dev-update-branch] C:\Users\Phil Leven\git\elrraggregator\.git 
	--> Working Tree - C:\Users\Phil Leven\git\elrraggregator\.git --> Import Projects 
         a. Import source = C:\Users\Phil Leven\git\elrraggregator
         b. Check all folders
        
      3. Eclipse --> Run --> Debug Configurations --> Remote Java Application --> New Launch Configuration (1st button on the left)
         a. Name = Debug 8000
         b. Project = elrraggregator
         c. Host = localhost
         d. Port = 8000
         e. Apply
         f. Run from terminal
            1. mvn spring-boot:run -D"spring-boot.run.jvmArgument"s="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" -D"spring-boot.run.profiles"=local -e
         g. Debug from Eclipse
 
 
 
elrrexternalservices
--------------------
      1. File --> Import --> Git --> Projects from Git --> Clone URI
         a. URI = https://github.com/US-ELRR/elrrexternalservices.git
         b. User = phleven
         c. Password = phil55.cindy61
         d. Select all branches
         e. Local Destination = C:\Users\Phil Leven\git\elrrexternalservices
        
      2. Eclipse --> Show View --> Git Repositories --> Right click on ellrexternalservices [dev-update-branch] C:\Users\Phil Leven\git\elrrexternalservices\.git 
	--> Working Tree - C:\Users\Phil Leven\git\elrrexternalservices\.git --> Import Projects 
         a. Import source = C:\Users\Phil Leven\git\elrrexternalservices
         b. Check all folders
         
      3. Eclipse --> Run --> Debug Configurations --> Remote Java Application --> New Launch Configuration (1st button on the left)
         a. Name = Debug 8000
         b. Project = elrrexternalservices
         c. Host = localhost
         d. Port = 8000
         e. Apply
         f. Run from terminal
            1. mvn spring-boot:run -D"spring-boot.run.jvmArgument"s="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" -D"spring-boot.run.profiles"=local -e
         g. Debug from Eclipse
 
 

elrrdatasync
------------
      1. File --> Import --> Git --> Projects from Git --> Clone URI
         a. URI = https://github.com/US-ELRR/elrrdatasync.git
         b. User = phleven
         c. Password = phil55.cindy61
         d. Select all branches
         e. Local Destination = C:\Users\Phil Leven\git\elrrdtatsynch
         
      2. Eclipse --> Show View --> Git Repositories --> Right click on ellrdatasynch [dev-update-branch] C:\Users\Phil Leven\git\elrrdatasynch\.git 
	--> Working Tree - C:\Users\Phil Leven\git\elrrdatasynch\.git --> Import Projects 
         a. Import source = C:\Users\Phil Leven\git\elrrdatasynch
         b. Check all folders
         
      3. Eclipse --> Run --> Debug Configurations --> Remote Java Application --> New Launch Configuration (1st button on the left)
         a. Name = Debug 8000
         b. Project = elrrdatasync
         c. Host = localhost
         d. Port = 8000
         e. Apply
         f. Run from terminal
            1. mvn spring-boot:run -D"spring-boot.run.jvmArgument"s="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" -D"spring-boot.run.profiles"=local -e
         g. Debug from Eclipse
      


elrrservices
------------
      1. File --> Import --> Git --> Projects from Git --> Clone URI
         a. URI = https://github.com/US-ELRR/elrrservices.git
         b. User = phleven
         c. Password = phil55.cindy61
         d. Select all branches
         e. Local Destination = C:\Users\Phil Leven\git\elrrservices
        
      2. Eclipse --> Show View --> Git Repositories --> Right click on ellrservices [dev-update-branch] C:\Users\Phil Leven\git\elrrservices\.git 
	--> Working Tree - C:\Users\Phil Leven\git\elrrservices\.git --> Import Projects 
         a. Import source = C:\Users\Phil Leven\git\elrrservices
         b. Check all folders

      3. Eclipse --> Run --> Debug Configurations --> Remote Java Application --> New Launch Configuration (1st button on the left)
         a. Name = Debug 8000
         b. Project = elrrservices
         c. Host = localhost
         d. Port = 8000
         e. Apply
         f. Run from terminal
            1. mvn spring-boot:run -D"spring-boot.run.jvmArgument"s="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" -D"spring-boot.run.profiles"=local -e
         g. Debug from Eclipse
    
   

Make sure TCP port 2181 for Zookeeper is not in use (one time):
1. Open Terminal
   a. FixWINNAT.bat



Create Docker Containers:
1. Start Docker Desktop
2. Open terminal
   a. cd C:\Dev\elrrdockercompose
   b. docker compose up
   c. docker compose logs
   c. Check for new containers in Docker Desktop
      1. dockercompose
         a. sync-db-1
         b. lrs-db-1
         c. zookeeper-1
         d. services-db-1
         e. lrs-1
         f. kalfka-1



Create postgreSQL17elrrdockercompose Docker Containers:
1. Start Docker Desktop
2. Open terminal
   a. cd C:\Dev\postgreSQL17elrrdockercompose
   b. docker compose up
   c. docker compose logs
   c. Check for new containers in Docker Desktop
      1. postgreSQL17elrrdockercompose
         a. sync-db-1
         b. lrs-db-1
         c. zookeeper-1
         d. services-db-1
         e. lrs-1
         f. kalfka-1



Create Kafka Dead Letter Queue: 
1. Open terminal
   a. Get hash for kafka-1 from Docker --> Containers
   b. docker exec -t -i 47960eb7788ed2cc38c7642521f12d12e1a4a83e059fa969b15276c0c916c968 /bin/bash
   c. cd /opt/bitnami/kafka/bin
   d. ./kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test-1-dlq
   e. Stop and restart elrrdockercompose container
   
   
   
Create and populate PostgreSQL service and staging schema:
1. Open DBeaver
   a. New Connections
      1. service_db
          5432
          service_user
          service_password
      2. sync_db
          5431
          sync_user
          sync_password
   b. Run service schema.sql
   c. Run staging schema.sql



Run elrrServiceEntities
    1. Open terminal
      a. cd C:\Users\1phil\git\elrrserviceentities
      b. git switch <branch>
      c. mvn clean install



Run elrrexternalservices and elrrdatasync:
1. Run elrrexternalservices
   a. Open terminal
      1. cd C:\Users\1phil\git\elrrexternalservices
      2. git config --global --add safe.directory C:/Users/1phil/git/elrrexternalservices
      3. git switch <branch>
      4. mvn clean install
      5. mvn spring-boot:run -D"spring-boot.run.profiles"=local -e
         mvn spring-boot:run -D"spring-boot.run.jvmArgument"s="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" -D"spring-boot.run.profiles"=local -e
      6. Ctrl+C to end --> Terminate batch job = Y 

2. Run elrrdatasynch:
   a. Open terminal
      1. cd C:\Users\1phil\git\elrrdatasync
      2. git config --global --add safe.directory C:/Users/1phil/git/elrrdatasync
      3. git switch <branch>
      4. mvn clean install
      5. mvn spring-boot:run -D"spring-boot.run.profiles"=local -e
      	 mvn spring-boot:run -D"spring-boot.run.jvmArgument"s="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" -D"spring-boot.run.profiles"=local -e
      6. Ctrl+C to end --> Terminate batch job = Y 

3. To test from browser
   a. Open terminal
      1. cd C:\Users\phleven\git\elrrexternalservices
      2. git switch <branch>
      3. mvn clean install
      4. mvn spring-boot:run -D"spring-boot.run.profiles"=local -e
   b. Open browser
      a. http://localhost:8088/api/lrsdata   



Run elrraggregator:
    1. Open terminal
      a. cd C:\Users\1phil\git\elrraggregator
      b. git config --global --add safe.directory C:/Users/1phil/git/elrraggregator
      c. git switch <branch>
      d. mvn clean install
      e. mvn spring-boot:run -D"spring-boot.run.profiles"=local -e
      	 mvn spring-boot:run -D"spring-boot.run.jvmArgument"s="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" -D"spring-boot.run.profiles"=local -e
      f. Ctrl+C to end --> Terminate batch job = Y 



Run elrrservices:
    1. Open terminal
      a. cd C:\Users\1phil\git\elrrservices
      b. git config --global --add safe.directory C:/Users/1phil/git/elrrservices
      c. git switch <branch>
      d. mvn clean install
      e. mvn spring-boot:run -D"spring-boot.run.profiles"=local -e
      	 mvn spring-boot:run -D"spring-boot.run.jvmArgument"s="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" -D"spring-boot.run.profiles"=local -e
      f. Ctrl+C to end --> Terminate batch job = Y 




Application UI:
1. http://localhost:8088/api/lrsdata

2. Yet (lrs) 
   a. http://localhost:8083
      user = my_username
      password = my_password

   b. STATEMENT BROWSER
      1. Credentiails to use = my_key



Run Postman to populate lrs-db:
1. Postman
   phleven
   Cynthia1#

   a. POST http://localhost:8083/xapi/statements
   b. Authorization
      1. Basic Auth
      2. Username = my_key
      3. Password = my_secret
   c. Headers
      1. key = X-Experience-API-Version
      2. value = 1.0.3
   d. Body raw, JSON

Copy and paste elrr_test_xAPI_statements.text into Postman.



View runnung Docker containers:
1. Open terminal
   a. docker ps



List Kafka topics:
1. Open terminal
   a. Get hash for kafka-1 from Docker --> Containers
   b. docker exec -t -i 47960eb7788ed2cc38c7642521f12d12e1a4a83e059fa969b15276c0c916c968 /bin/bash
   c. cd /opt/bitnami/kafka/bin
   d. ./kafka-topics.sh --bootstrap-server=localhost:9092 --list



View Kafka topic details:
1. Open terminal
   a. Get hash for kafka-1 from Docker --> Containers
   b. docker exec -t -i 47960eb7788ed2cc38c7642521f12d12e1a4a83e059fa969b15276c0c916c968 /bin/bash
   c. cd /opt/bitnami/kafka/bin
   d. ./kafka-configs.sh --bootstrap-server localhost:9092 --describe --topic test-1 --all
   e. ./kafka-configs.sh --bootstrap-server localhost:9092 --describe --topic test-1 --all | grep retention



Delete and Recreate Kafka topic:
1. Open terminal
   a. Get hash for kafka-1 from Docker --> Containers
   b. docker exec -t -i 47960eb7788ed2cc38c7642521f12d12e1a4a83e059fa969b15276c0c916c968 /bin/bash
   c. cd /opt/bitnami/kafka/bin
   d. ./kafka-topics.sh --delete --topic test-1 --bootstrap-server localhost:9092
   e. ./kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test-1



Consume Kafka Topic Messages:
1. Open terminal
   a. Get hash for kafka-1 from Docker --> Containers
   b. docker exec -t -i 47960eb7788ed2cc38c7642521f12d12e1a4a83e059fa969b15276c0c916c968 /bin/bash
   c. cd /opt/bitnami/kafka/bin
   d. ./kafka-console-consumer.sh -bootstrap-server localhost:9092 -topic test-1 --from-beginning
   	  ./kafka-console-consumer.sh -bootstrap-server localhost:9092 -topic test-1-dlq --from-beginning
   e. Ctrl + C to end 

{"statement":{"id":"d9f1328b-bcc2-4b9c-b954-03cb88a240c8","actor":{"objectType":"Agent","name":"Sophia Lewis","mbox":"mailto:sophia.lewis@us.navy.mil"},"verb":{"id":"https://adlnet.gov/expapi/verbs/achieved","display":{"en-us":"Achieved"}},"object":{"objectType":"Activity","id":"https://w3id.org/xapi/credential/GIAC%20Security%20Essentials%20Certification%20%28GSEC%29","definition":{"name":{"en-us":"GIAC Security Essentials Certification (GSEC)"},"type":"https://yetanalytics.com/deloitte-edlm/demo-profile/certificate"}},"authority":{"objectType":"Agent","account":{"homePage":"http://example.org","name":"0193f924-b470-89c9-a5f2-35cd03409e9c"}},"timestamp":"2024-09-20T21:37:23.835Z","stored":"2024-12-24T14:51:40.346Z","version":"1.0.0"}




KafkaMagic:
1. Start Docker
2. Run "C:\Dev\KafkaMagic_win-x64\KafkaMagic.exe"
3. Register New
   a. Name = Kafka
   b. Bootstrap Server = localhost:9092



Re-run creating Kafka message
1. Truncate and re-populate synch_db staging tables (synch_db_insert.sql)
2. Make sure import.importenddate < import.lastmodified
3. TRuncate and re-populate service_db tables (service_db_insert.sql)
4. Starts with LRSSyncSChedulingService.run() --> NewDataSevice.process()
5. ELRRMessageListener.listen()

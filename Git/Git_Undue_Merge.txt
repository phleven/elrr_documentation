How to Undo a Merge in Git



Undoing a merge in Git can be necessary if you merged the wrong branch, encountered conflicts, or realized the 
changes were unnecessary. There are two primary methods to undo a merge: using git reset for local merges and 
git revert for merges that have been pushed to a remote repository.



Using git reset to Undo a Local Merge:
The git reset command can be used to return to the commit before the merge, effectively undoing it. 
Here are the steps:

1. Find the Commit Before the Merge: 
Use git log 
to find the commit hash before the merge. 
If the merge was the most recent operation, you can use HEAD~1.

2. Reset to the Previous Commit: Use the following command to reset to the commit before the merge:
git reset --hard <commit-before-merge>

3. Preserve Uncommitted Changes: If you have important uncommitted changes, you can use git stash to save them
or use the --merge flag to preserve uncommitted changes that have not been staged:

git reset --merge <commit-before-merge>
git reset --merge HEAD~1



Using git revert to Undo a Pushed Merge
If the merge has already been pushed to a remote repository, git revert is the safer option as it does not delete 
the merge history but creates a new commit that reverts the changes.

1. Find the Merge Commit Hash: Use git log or git reflog to find the hash of the merge commit.

2. Revert the Merge: Use the following command to revert the merge:
git revert -m 1 <merge-commit-hash>



Important Considerations

git reset: This command effectively removes the commit from the history, which can be useful for local changes 
but may cause issues if the changes have been shared with others.

git revert: This command creates a new commit that undoes the changes, preserving the history and avoiding potential
conflicts with remote repositories.
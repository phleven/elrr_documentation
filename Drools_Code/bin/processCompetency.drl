import com.deloitte.elrr.entity.Email;
import com.deloitte.elrr.entity.Identity;
import com.deloitte.elrr.entity.Competency;
import com.deloitte.elrr.entity.PersonalCompetency;
import com.deloitte.elrr.entity.Person;
import com.deloitte.elrr.entity.types.LearningStatus;

import com.deloitte.elrr.elrraggregator.exception.ActivityNotFoundException;
import com.deloitte.elrr.elrraggregator.exception.PersonNotFoundException;
import com.deloitte.elrr.elrraggregator.exception.AggregatorException;

import java.lang.Exception

import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;

import com.yetanalytics.xapi.model.AbstractActor;
import com.yetanalytics.xapi.model.AbstractObject;
import com.yetanalytics.xapi.model.Account;
import com.yetanalytics.xapi.model.Activity;
import com.yetanalytics.xapi.model.ActivityDefinition;
import com.yetanalytics.xapi.model.LangMap;
import com.yetanalytics.xapi.model.ObjectType;
import com.yetanalytics.xapi.model.Statement;
import com.yetanalytics.xapi.model.Verb;
import com.yetanalytics.xapi.model.Score;

global com.deloitte.elrr.jpa.svc.CompetencySvc competencyService;
global com.deloitte.elrr.jpa.svc.PersonalCompetencySvc personalCompetencyService;

global com.deloitte.elrr.entity.Person person;
global com.yetanalytics.xapi.model.Statement statement;

global String verbId;
global String objType;
 
dialect "java"

rule "Process_Competency"
salience 95
   when
        Statement(verbId == "http://adlnet.gov/expapi/verbs/achieved")
        Statement(objType == "https://w3id.org/xapi/tla/activity-types/competency")
   then
        System.out.println("\n ==========Process Competency=============");
        System.out.println("rule triggered: " + drools.getRule().getName() + "\n");
        
        try {
        
            PersonalCompetency personalCompetency = null;
        
            ArrayList<String> languageCodes = new ArrayList<String>();
            languageCodes.add("en-us");
            languageCodes.add("en");
          
            // Process competency
            System.out.println("Process competency.");
    
            // Get activity
            Activity activity = (Activity) statement.getObject();
    
            System.out.println("Person " + person.getName() + " exists.");
    
            // Activity Definition
            ActivityDefinition activityDefenition = activity.getDefinition();
    
            String activityName = "";
            String activityDescription = "";
            String nameLangCode = null;
            String descLangCode = null;
            
            LangMap nameLangMap = null;
    
            try {
              nameLangMap = activityDefenition.getName();
            } catch (ClassCastException | NullPointerException e) {
              System.out.println(e.getMessage());
              e.printStackTrace();
              throw new AggregatorException("Error processing competency - " + e.getMessage());
            }
    
            // If Activity name
            if (nameLangMap != null) {
            
              Set<String> nameLangCodes = nameLangMap.getLanguageCodes();
    
              // Get namLangCode
              Iterator<String> nameLangCodesIterator = nameLangCodes.iterator();
    
              while (nameLangCodesIterator.hasNext()) {
              
                String code = nameLangCodesIterator.next();
                
                if (languageCodes.contains(code)) {
                    nameLangCode = code;
                    break;
                }
                
              }
    
              if (nameLangCode == null || nameLangCode.length() == 0) {
              
                // Check for en-us then en
                if (nameLangCodes.contains("en-us")) {
                
                  nameLangCode = "en-us";
    
                } else if (nameLangCodes.contains("en")) {
                
                  nameLangCode = "en";
    
                } else {
                  String firstElement =
                  nameLangCodes.stream().findFirst().orElse(null);
                  nameLangCode = firstElement;
                }
    
              } // if (nameLangCode == null || nameLangCode.length() == 0) {
    
              activityName = activityDefenition.getName().get(nameLangCode);
    
            } else {
              activityName = "";
            } // if (nameLangMap != null) {
            
            LangMap descLangMap = null;
    
            try {
              descLangMap = activity.getDefinition().getDescription();
            } catch (ClassCastException | NullPointerException e) {
              System.out.println(e.getMessage());
              e.printStackTrace();
              throw new AggregatorException("Error processing competency - " + e.getMessage());
            }
    
            // If Activity description
            if (descLangMap != null) {
            
              Set<String> descLangCodes = descLangMap.getLanguageCodes();
    
              // Get descLangCode
              Iterator<String> descLangCodesIterator = descLangCodes.iterator();
    
              while (descLangCodesIterator.hasNext()) {
              
                String code = descLangCodesIterator.next();
                
                if (languageCodes.contains(code)) {
                    descLangCode = code;
                    break;
                }
                
              }
    
              if (descLangCode == null || descLangCode.length() == 0) {
              
                // Check for en-us then en
                if (descLangCodes.contains("en-us")) {
                
                  descLangCode = "en-us";
    
                } else if (descLangCodes.contains("en")) {
                
                  descLangCode = "en";
    
                } else {
                  String firstElement =
                  descLangCodes.stream().findFirst().orElse(null);
                  descLangCode = firstElement;
                }
    
              } // if (descLangCode == null || descLangCode.length() == 0) {
    
              activityDescription = activityDefenition.getDescription().get(nameLangCode);
    
            } else {
              activityDescription = "";
            } // if (descLangMap != null) {
 
            // Get competency
            Competency competency = competencyService.findByIdentifier(activity.getId());

            // If competency exists exist
            if (competency != null) {
                System.out.println("Competency " + activity.getId() + " exists.");
            
                competency.setFrameworkTitle(activityName);
                competency.setFrameworkDescription(activityDescription);
                competencyService.update(competency);
                System.out.println("Competency " + activity.getId() + " updated.");
          
            // If competency doesn't exist
            } else if (competency == null) {
                System.out.println("Creating new competency.");
 
                competency = new Competency();
                competency.setIdentifier(activity.getId());
                competency.setFrameworkTitle(activityName);
                competency.setFrameworkDescription(activityDescription);
                competencyService.save(competency);
                System.out.println("Competency " + activity.getId() + " created.");
    
          } // if (competency == null) {
    
          // If Competency already exists
          if (competency != null) {
          
            // Get PersonalCompetency
            personalCompetency =
                personalCompetencyService.findByPersonIdAndCompetencyId(person.getId(), competency.getId());
   
            // If PersonalCompetency doesn't exist
            if (personalCompetency == null) {
            
              System.out.println("Creating new personal competency.");
              
              personalCompetency = new PersonalCompetency();
              personalCompetency.setPerson(person);
              personalCompetency.setCompetency(competency);
              personalCompetency.setHasRecord(true);
              personalCompetencyService.save(personalCompetency);
    
              System.out.println("Personal Competency for " + person.getName() + " - "
                  + competency.getFrameworkTitle() + " created.");
    
            }
    
          } // if (competency != null) {
        
        } catch (Exception e) {
          System.out.println("Exception while firing processStatement rule.");
          e.printStackTrace();
          throw new AggregatorException("while firing processStatement rule - " + e.getMessage());
        }

  end